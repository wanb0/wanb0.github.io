<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Nginx快速入门</title>
      <link href="/2022/10/25/nginx%20%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2022/10/25/nginx%20%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一-初识nginx"><a href="#一-初识nginx" class="headerlink" title="一 .初识nginx"></a>一 .初识nginx</h2><h3 id="1-1-nginx特性及其优点"><a href="#1-1-nginx特性及其优点" class="headerlink" title="1.1 nginx特性及其优点"></a>1.1 nginx特性及其优点</h3><ul><li><p>Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP&#x2F;POP3&#x2F;SMTP服务。Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，第一个公开版本0.1.0发布于2004年10月4日。2011年6月1日，nginx 1.0.4发布。</p></li><li><p>其特点是<strong>占有内存少，并发能力强</strong>，事实上nginx的<a href="https://so.csdn.net/so/search?q=%E5%B9%B6%E5%8F%91&spm=1001.2101.3001.7020">并发</a>能力在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。在全球活跃的网站中有12.18%的使用比率，大约为2220万个网站。</p></li><li><p>Nginx 是一个安装非常的简单、配置文件非常简洁（还能够支持perl语法）、Bug非常少的服务。<strong>Nginx 启动特别容易，并且几乎可以做到7*24不间断运行，即使运行数个月也不需要重新启动</strong>。你还能够不间断服务的情况下进行软件版本的升级。</p></li><li><p>Nginx代码完全用C语言从头写成。官方数据测试表明能够支持高达 50,000 个并发连接数的响应。</p></li></ul><h3 id="1-2-nginx产生的原因"><a href="#1-2-nginx产生的原因" class="headerlink" title="1.2 nginx产生的原因"></a>1.2 nginx产生的原因</h3><ul><li><p>一个项目在初步开发的时候，并发量比较少，所以在低并发的情况下，一个jar包启动应用就够了，然后内部tomcat返回内容给用户。</p><p><img src="/../image/nginx1.png"></p></li></ul><ul><li><p>随着项目的使用和开展，使用平台的用户越来越多了，并发量慢慢增大了，这时候一台服务器满足不了我们的需求了</p><p><img src="/../image/nginx2.png"></p></li><li><p>于是我们横向扩展，又增加了服务器。这个时候几个项目启动在不同的服务器上，用户要访问，就需要增加一个代理服务器了，通过代理服务器来帮我们转发和处理请求。</p><p><img src="/../image/nginx3.png"></p></li></ul><pre><code>我们希望这个代理服务器可以帮助我们接收用户的请求，然后将用户的请求按照规则帮我们转发到不同的服务器节点之上。这个过程用户是无感知的，用户并不知道是哪个服务器返回的结果，我们还希望他可以按照服务器的性能提供不同的权重选择。保证最佳体验！所以我们使用了Nginx。</code></pre><h2 id="二-nginx的代理"><a href="#二-nginx的代理" class="headerlink" title="二.nginx的代理"></a>二.nginx的代理</h2><h3 id="2-1-nginx-的正向代理"><a href="#2-1-nginx-的正向代理" class="headerlink" title="2.1 nginx 的正向代理"></a>2.1 nginx 的正向代理</h3><ul><li><p>正向代理：代理是代理客户端的<br><img src="/../image/zhengxiangdaili.png"></p></li><li><p>反向代理 ：代理是代理服务器的，所以用户是无感知的，比如，百度的服务器是在不同的服务器上，比如北京上海深圳都有百度的服务器，但是我们只需要搜索baidu.com就可以。</p><p><img src="/../image/fanxiangdaili.png"></p></li></ul><h3 id="2-2-nginx-的负载策略"><a href="#2-2-nginx-的负载策略" class="headerlink" title="2.2 nginx 的负载策略"></a>2.2 nginx 的负载策略</h3><p><strong>Nginx提供的负载均衡策略有2种：内置策略和扩展策略。内置策略为轮询，加权轮询，Ip hash。扩展策略，就天马行空，只有你想不到的没有他做不到的。</strong></p><ul><li><p>轮询</p><p><img src="/../image/lunxun.png"></p></li><li><p>加权轮询，因为可能不同服务器性能不一样，能接收的请求数量不同</p><p><img src="/../image/jiaquanlunxun.png"></p></li><li><p>iphash对客户端请求的ip进行hash操作，然后根据hash结果将同一个客户端ip的请求分发给同一台服务器进行处理，可以解决session不共享的问题。</p><p><img src="/../image/iph.png"></p></li><li><p>动静分离，在我们的软件开发中，有些请求是需要后台处理的，有些请求是不需要经过后台处理的（如：css、html、jpg、js等等文件），这些不需要经过后台处理的文件称为静态文件。让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来，动静资源做好了拆分以后，我们就可以根据静态资源的特点将其做缓存操作。提高资源响应的速度。</p></li></ul><p>​       <img src="/../image/dongjingfenli.png"></p><h2 id="三-nginx的安装和使用"><a href="#三-nginx的安装和使用" class="headerlink" title="三 . nginx的安装和使用"></a>三 . nginx的安装和使用</h2><ul><li><p>去官网进行下载</p><pre><code>http://nginx.org/en/download.html</code></pre><p>选择正确的版本，我这里下载的是linux版本</p><p><img src="/../image/nginxweb.png"></p></li><li><p>把下载好的压缩包通过命令或者SFTP传到服务器上，cd到传输的目录下，进行解压安装</p></li></ul><pre><code class="bash">tar -zxvf nginx-1.22.1.tar.gz # 解压安装包</code></pre><ul><li>执行.&#x2F;configure自动配置</li></ul><pre><code class="bash">./configure #自动配置</code></pre><ul><li>执行安装命令</li></ul><pre><code class="bash">make install #安装</code></pre><p><img src="/../image/nginxinstall.png"></p><ul><li><p>到安装目录下的objs进行启动nginx</p><p><img src="/../image/nginxmulu.png"></p></li><li><p>输入启动命令，没有报错就是启动成功</p><p><img src="/../image/nginxstart.png"></p><p>去浏览器检查默认的80端口，出现下面这个就是启动成功啦！云安全组也要放行80端口</p><p><img src="/../image/welcomenginx.png"></p><p>如何连接不上，检查阿里云安全组是否开放端口，或者服务器防火墙是否开放80端口:</p><p><img src="/../image/duankou80.png"></p></li></ul><ul><li><p><strong>配置监听</strong></p><pre><code>nginx的配置文件是conf目录下的nginx.conf，默认配置的nginx监听的端口为80，如果80端口被占用可以修改为未被占用的端口即可。</code></pre><p><img src="/../image/peizhi.png"></p><pre><code>当我们修改了nginx的配置文件nginx.conf 时，不需要关闭nginx后重新启动nginx，只需要执行命令 nginx -s reload 即可让改动生效</code></pre></li><li><p><strong>关闭Nginx</strong></p><p>如果使用cmd命令窗口启动nginx， 关闭cmd窗口是不能结束nginx进程的，可使用两种方法关闭nginx</p><p>(1)输入nginx命令 nginx -s stop(快速停止nginx) 或 nginx -s quit(完整有序的停止nginx)</p><p>(2)使用taskkill taskkill &#x2F;f &#x2F;t &#x2F;im nginx.exe</p><pre><code class="bash">taskkill是用来终止进程的，/f是强制终止 ./t终止指定的进程和任何由此启动的子进程。/im示指定的进程名称 .</code></pre></li></ul><h2 id="四-nginx命令"><a href="#四-nginx命令" class="headerlink" title="四. nginx命令"></a>四. nginx命令</h2><pre><code class="bash">cd /usr/local/nginx/sbin/./nginx  启动./nginx -s stop  停止./nginx -s quit  安全退出./nginx -s reload  重新加载配置文件ps aux|grep nginx  查看nginx进程</code></pre><p>防火墙的相关命令:</p><pre><code class="bash"># 开启service firewalld start# 重启service firewalld restart# 关闭service firewalld stop# 查看防火墙规则firewall-cmd --list-all# 查询端口是否开放firewall-cmd --query-port=8080/tcp# 开放80端口firewall-cmd --permanent --add-port=80/tcp# 移除端口firewall-cmd --permanent --remove-port=8080/tcp#重启防火墙(修改配置后要重启防火墙)firewall-cmd --reload# 参数解释1、firwall-cmd：是Linux提供的操作firewall的一个工具；2、--permanent：表示设置为持久；3、--add-port：标识添加的端口；</code></pre><h2 id="五-尝试使用nginx"><a href="#五-尝试使用nginx" class="headerlink" title="五. 尝试使用nginx"></a>五. 尝试使用nginx</h2><ul><li>先进行配置文件的修改</li></ul><pre><code class="bash">http &#123;    ...    upstream cvzhanshi&#123;        server 127.0.0.1:8082/ weight=1;        server 127.0.0.1:8081/ weight=1;    &#125;    server &#123;        listen       80;        server_name  localhost;        location / &#123;            root   html;            index  index.html index.htm;            proxy_pass http://cvzhanshi;        &#125;        ...&#125;</code></pre><ul><li><p>启动两个端口的项目</p><p><img src="/../image/qiyongshuangduankou.png"></p></li><li><p>启动nginx</p></li><li><p>进行测试</p><p><img src="/../image/testnginx.png"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> 服务器代理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云之初体验</title>
      <link href="/2022/10/23/%E9%98%BF%E9%87%8C%E4%BA%91%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
      <url>/2022/10/23/%E9%98%BF%E9%87%8C%E4%BA%91%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="1-首次接触服务器"><a href="#1-首次接触服务器" class="headerlink" title="1.首次接触服务器"></a>1.首次接触服务器</h3><p>​本人是一名有幸刚考到电子信息专业的一名研一的学生。由于自己导师的需求，自己最近须要了解并学习web开发相关的知识，当然把web部署到服务器也是很重要的技能。于是通过了解和同学的推荐，他们告诉我阿里云的ECS服务器是最好用的，对小白也都非常友好，于是我抱着试试看的心态就去阿里云官网看了一下，于是就发现了，“飞天加速计划·高校学生在家实践”活动，这个活动对高校的学生非常优惠，于是我通过第一阶段的学习成功拿到了14天ECS的免费试用！</p><h3 id="2-我的阿里云使用体验"><a href="#2-我的阿里云使用体验" class="headerlink" title="2.我的阿里云使用体验"></a>2.我的阿里云使用体验</h3><p>​  通过在阿里云的第一阶段的训练，我已经可以去创建并操作一个我的实例了。<img src="/../image/p1.png"></p><p>​  创建好了第一个实例以后，我使用Terimius1工具连接到了ECS，连接过程也是非常快:</p><p><img src="/../image/p2.png"></p><p>​之前说过我组租服务器，是为了web开发的学习，所以我在我的服务器通过yum安装了jdk1.8的和mysql8的开发环境，通过yum安装jdk1.8的过程还是十分的顺利，只需要一行命令即可，可以说比windows安装还要方便。</p><p>​在centos7.9上安装jdk1.8只用了以下两个命令：</p><pre><code class="shell">yum list java-1.8*                   //在yum中查找可以安装的jdk版本 yum install java-1.8.0-openjdk* -y   //开始安装</code></pre><p>​紧接着，我写了一个java文件来测试我的java环境是否配置好了。一次测试成功！</p><p><img src="/../image/p3.png"></p><p>然后我就在服务器开始安装我的mysql8。</p><p>因为之前安装jdk1.8的时候已经启用了yum的存储库，所以在这直接用yum进行安装。</p><pre><code class="shell">yum --enablerepo=mysql80-community install mysql-community-server   //执行这个命令进行安装</code></pre><p>​</p><aside>💡 如果安装提示 **The GPG keys listed for the “MySQL 8.0 Community Server“ repository are already installed but……**</aside><p>请执行以下命令后，重新进行安装：</p><pre><code class="shell">rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022</code></pre><p>安装好之后就可以启动我的mysql8的数据库，再通过阿里云服务器开发3306端口，在通过Navicat15的连接，很快就连接到了我的ECS上的mysql8。</p><p><img src="/../image/p5.png"></p><p><img src="/../image/p4.png"></p><p>现在环境就基本配置好了，下一步准备学习把网站部署到服务器上。</p><h3 id="3-总结展望"><a href="#3-总结展望" class="headerlink" title="3.总结展望"></a>3.总结展望</h3><p>​总的来说，阿里云的ECS给我的印象还是十分好的，操作简单，自由度很高非常容易上手，也感谢阿里云给我的这次体验机会，我也希望能继续续领阿里的ECS服务器进行更多的操作和学习。感谢阿里云给我们这么好的平台！</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> aliyun </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云服务器领取并配置环境</title>
      <link href="/2022/10/23/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A2%86%E5%8F%96%E5%B9%B6%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/"/>
      <url>/2022/10/23/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A2%86%E5%8F%96%E5%B9%B6%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h2 id="一-服务器的免费领取"><a href="#一-服务器的免费领取" class="headerlink" title="一. 服务器的免费领取"></a>一. 服务器的免费领取</h2><h3 id="1-先到阿里云学生的活动页面登录领取14天"><a href="#1-先到阿里云学生的活动页面登录领取14天" class="headerlink" title="1. 先到阿里云学生的活动页面登录领取14天"></a>1. 先到阿里云学生的活动页面登录领取14天</h3><pre><code>https://developer.aliyun.com/plan/student#J_5144437010  //领取网页 </code></pre><p><img src="/../image/p6.png"></p><p>点击这里进行领取，如果没有进行学生认证的话，先在支付宝进行学生的认证。认证之后，跳转到到完成新手营界面，进行服务器的新手训练，按照提示操作即可，还有一个十道题的小测验，答案我放在下方的链接,如果没有可以自行百度：</p><pre><code>https://blog.csdn.net/qq_35834501/article/details/106539233https://blog.csdn.net/qq_45037404/article/details/104552886https://blog.csdn.net/Miracle_ps/article/details/104555821https://wenku.baidu.com/view/e8fdd626a5c30c22590102020740be1e640ecc59.html</code></pre><p>完成上述的任务就可以领取14天的ECS服务器啦！</p><h3 id="2-投稿并续领两个月的ECS"><a href="#2-投稿并续领两个月的ECS" class="headerlink" title="2. 投稿并续领两个月的ECS"></a>2. 投稿并续领两个月的ECS</h3><p>点击免费续领：</p><p><img src="/../image/p7.png"></p><p>跳转到以下页面：</p><p><img src="/../image/p8.png"></p><p>按照要求水一篇赞美阿里云的小文章，markdown格式，在社区发布，发布后把链接给管理员审核通过即可续费两个月！</p><p>如果不知道写的格式，可以参考我的上一篇文章，</p><p>。</p><h3 id="二-服务器的基本操作和软件安装"><a href="#二-服务器的基本操作和软件安装" class="headerlink" title="二 .服务器的基本操作和软件安装"></a>二 .服务器的基本操作和软件安装</h3><h3 id="1-通过命令安装宝塔面板"><a href="#1-通过命令安装宝塔面板" class="headerlink" title="1. 通过命令安装宝塔面板"></a>1. 通过命令安装宝塔面板</h3><p>首先获取该实例的密码，如果不记得可以去下面网页一键重置</p><p><img src="/../image/repass.png"></p><p>通过SSH进行远程登录ECS，可以用阿里云控制台远程登录</p><p><img src="/../image/workbench.png"></p><p><img src="/../image/loginssh.png"></p><p>访问失败的去安全组看下22端口是否开放。</p><p>也可以安装远程连接软件，软件用起来会比阿里网页这个流畅一些，在这里我用的是Terimius工具，须要输入服务器ip地址，ssh的连接的用户名和密码，就是重置实例的用户名和密码。</p><p><img src="/../image/termiuslogin.png"></p><p>接下来我们去官网找到宝塔面板相应系统的下载命令复制后直接在命令行输入</p><p><img src="/../image/baotaweb.png"></p><p>输入该命令行后，服务器开始安装宝塔面板，耐心等待一会这里会有两次询问，输入y和yes就可以完成下载，出现以下的图片就说明宝塔面板安装成功！记得把红框内的内外网地址和用户名密码保存起来，可以放在记事本中，用到了就去看一下。</p><p><img src="/../image/installbaota.png"></p><p><img src="/../image/baotainstall.png"></p><p>接下来我们把上图出现的外网地址复制到浏览器，并输入上面写的用户名和密码</p><p><img src="/../image/baotalogin.png"></p><p>如果登录不上，去检查一下控制台安全组有没有<strong>放行宝塔的端口号</strong>。</p><p>登录进去以后，要绑定你的宝塔账号，如果没有先注册一个</p><p><img src="/../image/baotauser.png"></p><h3 id="2-通过宝塔面板安装应用"><a href="#2-通过宝塔面板安装应用" class="headerlink" title="2.通过宝塔面板安装应用"></a>2.通过宝塔面板安装应用</h3><p>​注册完毕后，会弹出弹窗，在这里你可以勾选自己须要的应用以及版本进行快速安装,也可以一会去左侧导航栏里面的软件商店搜索安装，点击极速安装就可以。</p><p><img src="/../image/baotainstallapp.png"></p><ul><li>下面是本次web开发所可能需要的端口，请在阿里云的安全组进行开发下列端口</li></ul><p><img src="/../image/duankouhao.png"></p><ul><li>本次还用到了Tomcat,Redis,Nginx,均可以在宝塔面板的软件商店进行一键安装。</li></ul><p><img src="/../image/anzhuang.png"></p><ul><li><p>其中Nginx需要在宝塔改一下配置文件，如果不了解Nginx可以看下本站的上上篇文字<strong>Nginx快速入门</strong></p><p><img src="/../image/nginxconfig.png"></p></li><li><p>通过yum安装JDK   [在远程连接的命令行输入]</p><pre><code class="bash">yum list java-1.8*                   //在yum中查找可以安装的jdk版本 yum install java-1.8.0-openjdk* -y   //开始安装</code></pre><p>紧接着，我写了一个java文件来测试我的java环境是否配置好了。一次测试成功！</p><p><img src="/../image/p3.png"></p></li></ul><h3 id="3-配置并用Navicat连接ECS的mysql"><a href="#3-配置并用Navicat连接ECS的mysql" class="headerlink" title="3.配置并用Navicat连接ECS的mysql"></a>3.配置并用Navicat连接ECS的mysql</h3><p>在宝塔面板下载好mysql之后，点击左侧导航栏数据库，获取到root密码后，在命令行输入mysql -u root -p和密码登录到mysql中</p><p><img src="/../image/getpassword.png"></p><p><img src="/../image/mysqllogin.png"></p><p>因为mysql现有的用户都是localhost的，所以须要创建一个可以远程访问的mysql用户，或者给root用户增加权限。</p><pre><code class="shell">create user &#39;用户名&#39;@&#39;允许那个主机链接&#39; identified by &#39;密码&#39;;           // 创建新用户 %  主机名为所有主机可以连接grant all privileges on *.* to &#39;用户名&#39;@&#39;主机名&#39; with grant option;   //授予该用户若有权限flush privileges;                                                   //刷新权限quit                   //退出mysqlservice mysqld restart //重启mysql</code></pre><p><img src="/../image/mysqlcreatuser.png"></p><p>因为centos自带防火墙，所以还要在centos中放行tcp3306端口</p><pre><code class="shell">firewall-cmd --list-all   // 查看开放的端口号firewall-cmd --zone=public --add-port=3306/tcp --permanent   // 开放3306端口firewall-cmd --reload// 重启防火墙firewall-cmd --list-all     //查看是否生效</code></pre><p><img src="/../image/centosfrrewall.png"></p><p>接下来就用创建好的用户名和密码通过Navicat进行连接mysql,连接名可以任意</p><p><img src="/../image/navicat15connect.png"></p><p>连接成功！</p><p>![](..&#x2F;image&#x2F;navicat connectend.png)</p><h3 id="4-通过Navicat-导入数据库文件"><a href="#4-通过Navicat-导入数据库文件" class="headerlink" title="4. 通过Navicat 导入数据库文件"></a>4. 通过Navicat 导入数据库文件</h3><p>先创建好对应的数据库，字符集可以不用写</p><p><img src="/../image/createdatabase.png"></p><p>点击数据库进行右键，点击执行sql文件，把须要导入的sql文件导入</p><p><img src="/../image/zhixingsql.png"></p><p><img src="/../image/yunxingsql.png"></p><p>完事点击关闭就可以了，点击数据库右键刷新，就可以看到表格和数据都已经导入进去了。</p><p><img src="/../image/daoruchenggong.png"></p><p>至此，web须要的软件环境准备好了。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> aliyun </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
